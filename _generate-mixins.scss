// |------------------------------------------------------
// |------------------------------------------------------
// | Generate mixins
// |------------------------------------------------------
// |------------------------------------------------------


/**
 * Generate a custom class for all the states
 *
 * @param 	list 	$pattern 		The name pattern of the class
 * @param 	list 	$statesNames 		The states names to generate
 */
@mixin kgrid_generate_custom_class(
	$pattern,
	$statesNames : null
) {
	// manage states to generate :
	$states : ();
	@if $statesNames == null {
		// loop on each states to generate names list :
		@each $stateName, $state in $_kgrid_states {
			$states : append($states, $stateName);
		}
	} @else {
		$states : $statesNames;
	}

	// loop on each states :
	@each $stateName in $states
	{
		// manage statename :
		@if type-of($stateName) != string {
			$stateName : map-get($stateName, name);
		}

		// classes :
		$classes : _kgrid_get_var_value(classes, $stateName);

		// genrate the classname :
		@if $classes
		{
			@include kgrid_state($stateName, false) {
				#{_kgrid_classname($pattern, $stateName)} {
					@content;
				}
			}
		}
	}
}

// Generate all helpers classes
// All the classes generated are not wrapper in kgrid_state
// in this mixin... Just the names are generated accordingly to the
// requested state
@mixin _kgrid_generate_helper_classes (
	$state : null,
	$what : null
) {
	// helpers :
	@if $what == null or index($what, float) or index($what, helpers) {
		#{_kgrid_classname($kgrid-float-left-name-pattern, $state)} {
			@include kgrid_float(left);
		}
		#{_kgrid_classname($kgrid-float-right-name-pattern, $state)} {
			@include kgrid_float(right);
		}
	}

	@if $what == null or index($what, clear) or index($what, helpers) {
		#{_kgrid_classname($kgrid-clear-name-pattern, $state)} {
			@include kgrid_clear(both);
		}
		#{_kgrid_classname($kgrid-clear-left-name-pattern, $state)} {
			@include kgrid_clear(left);
		}
		#{_kgrid_classname($kgrid-clear-right-name-pattern, $state)} {
			@include kgrid_clear(right);
		}
	}

	@if $what == null or index($what, no_gutter) or index($what, no_margin) or index($what, helpers) {
		#{_kgrid_classname($kgrid-no-gutter-name-pattern, $state)},
		#{_kgrid_classname($kgrid-no-margin-name-pattern, $state)} {
			@include kgrid_no_margin();
		}
		#{_kgrid_classname($kgrid-no-gutter-left-name-pattern, $state)},
		#{_kgrid_classname($kgrid-no-margin-left-name-pattern, $state)} {
			@include kgrid_no_margin(left);
		}
		#{_kgrid_classname($kgrid-no-gutter-right-name-pattern, $state)},
		#{_kgrid_classname($kgrid-no-margin-right-name-pattern, $state)} {
			@include kgrid_no_margin(right);
		}
		#{_kgrid_classname($kgrid-no-gutter-top-name-pattern, $state)},
		#{_kgrid_classname($kgrid-no-margin-top-name-pattern, $state)} {
			@include kgrid_no_margin(top);
		}
		#{_kgrid_classname($kgrid-no-gutter-bottom-name-pattern, $state)},
		#{_kgrid_classname($kgrid-no-margin-bottom-name-pattern, $state)} {
			@include kgrid_no_margin(bottom);
		}
	}

	@if $what == null or index($what, gutter) or index($what, margin) or index($what, helpers) {
		#{_kgrid_classname($kgrid-gutter-name-pattern, $state)},
		#{_kgrid_classname($kgrid-margin-name-pattern, $state)} {
			@include kgrid_margin(left right);
		}
		#{_kgrid_classname($kgrid-gutter-left-name-pattern, $state)},
		#{_kgrid_classname($kgrid-margin-left-name-pattern, $state)} {
			@include kgrid_margin(left);
		}
		#{_kgrid_classname($kgrid-gutter-right-name-pattern, $state)},
		#{_kgrid_classname($kgrid-margin-right-name-pattern, $state)} {
			@include kgrid_margin(right);
		}
		#{_kgrid_classname($kgrid-gutter-top-name-pattern, $state)},
		#{_kgrid_classname($kgrid-margin-top-name-pattern, $state)} {
			@include kgrid_margin(top);
		}
		#{_kgrid_classname($kgrid-gutter-bottom-name-pattern, $state)},
		#{_kgrid_classname($kgrid-margin-bottom-name-pattern, $state)} {
			@include kgrid_margin(bottom);
		}
	}

	@if $what == null or index($what, auto_height) or index($what, helpers) {
		#{_kgrid_classname($kgrid-auto-height-name-pattern, $state)} {
			height:inherit;
		}
	}

	@if $what == null or index($what, centered) or index($what, helpers) {
		#{_kgrid_classname($kgrid-centered-name-pattern, $state)} {
			@include kgrid_centered(null);
		}
	}

	@if $what == null or index($what, parent) or index($what, helpers) {
		#{_kgrid_classname($kgrid-parent-name-pattern, $state)} {
			@include _kgrid_parent();
		}
	}

	@if $what == null or index($what, vertical_align) or index($what, helpers) {
		#{_kgrid_classname($kgrid-vertical-align-middle-name-pattern, $state)} {
			@include _kgrid_vertical_align();
		}
		#{_kgrid_classname($kgrid-vertical-align-top-name-pattern, $state)} {
			@include _kgrid_vertical_align(top);
		}
		#{_kgrid_classname($kgrid-vertical-align-bottom-name-pattern, $state)} {
			@include _kgrid_vertical_align(bottom);
		}
	}

	/**
	 * Visible, hide, etc...
	 */
	@if $what == null or index($what, hide) or index($what, helpers) {
		#{_kgrid_classname($kgrid-hide-name-pattern, $state)} {
			@include kgrid_hide(null);
		}
	}

	@if $what == null or index($what, not_visible) or index($what, helpers) {
		#{_kgrid_classname($kgrid-not-visible-name-pattern, $state)} {
			@include kgrid_not_visible(null);
		}
	}

	@if $what == null or index($what, show) or index($what, helpers) {
		#{_kgrid_classname($kgrid-show-name-pattern, $state)} {
			@include kgrid_show(null);
		}
		#{_kgrid_classname($kgrid-show-inline-name-pattern, $state)} {
			@include kgrid_show_inline(null);
		}
	}

	@if $what == null or index($what, visible) or index($what, helpers) {
		#{_kgrid_classname($kgrid-visible-name-pattern, $state)} {
			@include kgrid_visible(null);
		}
	}

	/**
	 * Clear each class :
	 */
	@if $what == null or index($what, clear_each) or index($what, helpers) {
		@each $clearName, $clearMap in $_kgrid_clear_classes {
			// get count :
			$clearCount : map-get($clearMap, clearEach);
			// what to clear :
			$clearWhat : map-get($clearMap, clearWhat);
			// generate the class :
			#{_kgrid_classname($kgrid-clear-each-pattern, $state, $clearCount)} {
				@include _kgrid_clear_each($clearCount, $clearWhat);
			}
		}
	}

	// debug colors :
	$debug : _kgrid_get_var_value(debug, $state);
	@if $debug and ( $what == null or index($what, debug_colors) or index($what, helpers) ) {
		// debug color classes :
		#{_kgrid_classname($kgrid-debug-color-name-pattern, $state, 1)} {
			#{$kgrid-debug-selector} {
				background-color : #edeeb2;
			}
		}
		#{_kgrid_classname($kgrid-debug-color-name-pattern, $state, 2)} {
			#{$kgrid-debug-selector} {
				background-color : #fae4a7;
			}
		}
		#{_kgrid_classname($kgrid-debug-color-name-pattern, $state, 3)} {
			#{$kgrid-debug-selector} {
				background-color : #f5eacc;
			}
		}
		#{_kgrid_classname($kgrid-debug-color-name-pattern, $state, 4)} {
			#{$kgrid-debug-selector} {
				background-color : #eebdb2;
			}
		}
		#{_kgrid_classname($kgrid-debug-color-name-pattern, $state, 5)} {
			#{$kgrid-debug-selector} {
				background-color : #d4b2ee;
			}
		}
		#{_kgrid_classname($kgrid-debug-color-name-pattern, $state, 6)} {
			#{$kgrid-debug-selector} {
				background-color : #b2d8ee;
			}
		}
	}
}


// generate settings json :
@mixin kgrid_generate_json_settings() {

	// settings content :
	$kgrid-settings-states : "{";

	// generate all classes for differents media queries :
	$statesCount : length($_kgrid_states);
	$i : 0;
	@each $stateName, $state in $_kgrid_states {
	
		$name : $stateName;

		$kgrid-settings-states : "#{$kgrid-settings-states} \"#{$name}\":{";
	
		@each $varName, $var in $state {

			$value : null;
			@if $varName == "query" {
				$value : _kgrid_get_media_query($stateName);
			} @else {
				$value : map-get($state,$varName);
			}

			@if $value == null {
				$kgrid-settings-states : "#{$kgrid-settings-states} \"#{$varName}\" : null,";
			} @elseif type-of($value) == bool {
				$kgrid-settings-states : "#{$kgrid-settings-states} \"#{$varName}\" : #{$value},";
			} @else {
				$kgrid-settings-states : "#{$kgrid-settings-states} \"#{$varName}\" : \"#{$value}\",";		
			}
		}

		$kgrid-settings-states : "#{$kgrid-settings-states} \"_kgrid\" : true";

		@if $i >= $statesCount - 1 {
			$kgrid-settings-states : "#{$kgrid-settings-states} }";
		} @else {
			$kgrid-settings-states : "#{$kgrid-settings-states} },";
		}
	
		// update i :
		$i : $i + 1;

	}

	 // generate settings json :
	$kgrid-settings-states : "#{$kgrid-settings-states}}";
	$kgrid-settings : "{";
	$kgrid-settings : "#{$kgrid-settings} \"version\" : \"#{$_kgrid-version}\"";
	
	// states :
	$kgrid-settings : "#{$kgrid-settings}, \"states\" : #{$kgrid-settings-states}";
	
	// debug devices :
	$debug_devices : $_kgrid_states_debug_devices;
	@if length($_kgrid_states_debug_devices) <= 0 {
		$debug_devices : null;
	}
	// $kgrid-settings : "#{$kgrid-settings}, \"debugDevices\" : { #{$debug_devices} }";

	// settings :
	// $kgrid-settings : "#{$kgrid-settings}, \"classPrefix\" : \"#{$kgrid-class-prefix}\"";
	$kgrid-settings : "#{$kgrid-settings} }";
	#kgrid-settings {
		content : $kgrid-settings;
	}
}


// kgrid mixin :
// Generate all the classes needed for a grid
@mixin kgrid_generate_classes(
	$stateName : null,
	$what : null,
	$scope : null
) {
	// if the what parameter is not null, mean that we need to generate only certain classes in a certain order :
	@if $what
	{
		// loop on each what item to generate the corresponding classes :
		@each $w in $what
		{
			// check if a scope exist :
			@if $scope {
				// wrapp grid into scope :
				.#{$scope} {
					@include _kgrid_generate_classes($stateName, ( $w ), true);
				}
			} @else {
				// generate classes :
				@include _kgrid_generate_classes($stateName, ( $w ), false);
			}
		}
	}
	@else
	{
		// don't have any "what" parameter so generate all the classes
		// check if a scope exist :
		@if $scope {
			// wrapp grid into scope :
			.#{$scope} {
				@include _kgrid_generate_classes($stateName, null, true);
			}
		} @else {
			// generate classes :
			@include _kgrid_generate_classes($stateName, null, false);
		}
	}
}
$_kgrid_generateOnlyOnce : true; // keep track of generate once classes
@mixin _kgrid_generate_classes(
	$stateName : null,
	$what : null,
	$has-parent : false
) {
 
	// generate these classes only once :
	@if $_kgrid_generateOnlyOnce
	{

		// update status :
		$_kgrid_generateOnlyOnce : false;

		// | ------------------------
		// | Windows 8 fix
		// | ------------------------
		
		// Windows 8 fix for snap mode :
		@media screen and (max-width: 400px) {
			@-ms-viewport { width: device-width; }
		}


		// | ------------------------
		// | Container
		// | ------------------------
	 
		// generate container class :
		@if $what == null or index($what, container) or index($what, default)
		{
			$container-selector : ();
			$container-selector : append( $container-selector, unquote(_kgrid_classname($kgrid-container-name-pattern)), comma);
			#{$container-selector} {
				@include kgrid_container();
			}
		}


		// | ------------------------
		// | Parent selector
		// | ------------------------

		// parent common css :
		@if $what == null or index($what, parent) or index($what, default)
		{
			$parentSelector : _kgrid_classname($kgrid-parent-name-pattern,null,null);
			#{$parentSelector} {
				@extend %kgrid-clearfix;
				@extend %kgrid-parent-common;
			}
		}


		// // | ------------------------
		// // | JSON Settings
		// // | ------------------------
	 
		// // generate json settings :
		@if $kgrid-generate-json-settings
		{
			@include kgrid_generate_json_settings();
		}

	}


	// | ------------------------
	// | Set the list of states to generate
	// | ------------------------
	$states : $_kgrid_states;
	@if $stateName and _kgrid_has_state($stateName) {
		$states : map-set((), $stateName, _kgrid_get_state($stateName));
	}


	// | ------------------------
	// | Store all the generated common selectors
	// | ------------------------

	// generate all selector for extends :
	$grid-common-selector : ();
	$push-common-selector : ();
	$pull-common-selector : ();
	$prefix-common-selector : ();
	$suffix-common-selector : ();


	// | ------------------------
	// | Media queries classes common selectors
	// | ------------------------

	// generate all classes for media queries :
	@each $stateName, $state in $states {
	
		// setup vars :
		$media : $stateName;
		$classes : map-get($state, classes);
		$context : map-get($state, context);
		$name-multiplicator : map-get($state, name-multiplicator);
		$generate-push-classes : _kgrid_get_var_value(generate-push-classes, $state);
		$generate-pull-classes : _kgrid_get_var_value(generate-pull-classes, $state);
		$generate-prefix-classes : _kgrid_get_var_value(generate-prefix-classes, $state);
		$generate-suffix-classes : _kgrid_get_var_value(generate-suffix-classes, $state);

		// generate classes :   
		@if $classes == true and $context {

			// get specials columns :
			$columnsMap : map-merge((), $_kgrid_columns);

			// register each default columns :
			@for $j from 0 through $context {
				
				// name :
				$columnName : "#{$j*$name-multiplicator}";
				$columnWidth : $j * $name-multiplicator;

				// // create a column :
				$col : _kgrid_create_column($columnName, $columnWidth, $context, $name-multiplicator);

				// // add column in columns map :
				$columnsMap : map-set($columnsMap, $columnName,  $col);
			}

			// loop on each columns to generate common selector :
			@each $columnName, $column in $columnsMap {
		 	
				// add selector :
				@if $what == null or index($what, grid) or index($what, default) {
					$grid-common-selector : append( $grid-common-selector, unquote(_kgrid_classname($kgrid-grid-name-pattern, $media, $columnName)), comma );
				}
				@if $generate-push-classes and ($what == null or index($what, push) or index($what, default)) {
					$push-common-selector : append( $push-common-selector, unquote(_kgrid_classname($kgrid-push-name-pattern, $media, $columnName)), comma );
				}
				@if $generate-pull-classes and ($what == null or index($what, pull) or index($what, default)) {
					$pull-common-selector : append( $pull-common-selector, unquote(_kgrid_classname($kgrid-pull-name-pattern, $media, $columnName)), comma );
				}
				@if $generate-prefix-classes and ($what == null or index($what, prefix) or index($what, default)) {
					$prefix-common-selector : append( $prefix-common-selector, unquote(_kgrid_classname($kgrid-prefix-name-pattern, $media, $columnName)), comma );
				}
				@if $generate-suffix-classes and ($what == null or index($what, suffix) or index($what, default)) {
					$suffix-common-selector : append( $suffix-common-selector, unquote(_kgrid_classname($kgrid-suffix-name-pattern, $media, $columnName)), comma );
				}
			}
		}
	}
 
	// common css :
	@if  $what == null or index($what, grid) or index($what, default) {
		#{$grid-common-selector} {
			@include _kgrid_grid_common();
		}
	}
	@if  $what == null or index($what, push) or index($what, default) {
		#{$push-common-selector} {
			@include _kgrid_push_common();
		}
	}
	@if  $what == null or index($what, pull) or index($what, default) {
		#{$pull-common-selector} {
			@include _kgrid_pull_common();
		}
	}
	@if  $what == null or index($what, prefix) or index($what, default) {
		#{$prefix-common-selector} {
			@include _kgrid_prefix_common();
		}
	}
	@if  $what == null or index($what, suffix) or index($what, default) {
		#{$suffix-common-selector} {
			@include _kgrid_suffix_common();
		}
	}


	// | ------------------------
	// | Media queries classes
	// | ------------------------
 
	// generate all classes for differents media queries :
	@each $stateName, $state in $states {
		
		// setup vars :
		$classes : _kgrid_get_var_value(classes, $state);
		$context : _kgrid_get_var_value(context, $state);
		$name-multiplicator : _kgrid_get_var_value(name-multiplicator, $state);
		$generate-push-classes : _kgrid_get_var_value(generate-push-classes, $state);
		$generate-pull-classes : _kgrid_get_var_value(generate-pull-classes, $state);
		$generate-prefix-classes : _kgrid_get_var_value(generate-prefix-classes, $state);
		$generate-suffix-classes : _kgrid_get_var_value(generate-suffix-classes, $state);
		$generate-helpers-classes : _kgrid_get_var_value(generate-helpers-classes, $state);

		// generate all media queries grid classes :
		@if $classes == true {

			// parent common css :
			$parentSelector : _kgrid_classname($kgrid-parent-name-pattern,$stateName,null);
			#{$parentSelector} {
				@extend %kgrid-clearfix;
				@extend %kgrid-parent-common;
			}

			// generate all the classes :
			@include kgrid_state($stateName, $has-parent) {
		 
				// get specials columns :
				$columnsMap : map-merge((), $_kgrid_columns);

				// register each default columns :
				@for $j from 0 through $context {
					
					// name :
					$columnName : "#{$j*$name-multiplicator}";
					$columnWidth : $j * $name-multiplicator;

					// // create a column :
					$col : _kgrid_create_column($columnName, $columnWidth, $context, $name-multiplicator);

					// // add column in columns map :
					$columnsMap : map-set($columnsMap, $columnName,  $col);
				}

				// generate all classes for columns :
				@each $columnName, $column in $columnsMap {

					// variables :
					$columnsCount : map-get($column, columns);
					$columnsContext : map-get($column, context);
					$columnsNameMultiplicator : map-get($column, name-multiplicator);

					// extend context in state (for columns) :
					$extendedState : map-merge($state, (
						context : $columnsContext,
						name-multiplicator : $columnsNameMultiplicator // inject the name multiplicator here getted from column to handle custom registered columns
					));

					// classes :
					@if $what == null or index($what, grid) or index($what, default) {
						#{_kgrid_classname($kgrid-grid-name-pattern, $stateName, $columnName)} {
							@include _kgrid($columnsCount, $extendedState);
						}
					}
					@if $generate-push-classes == true and ($what == null or index($what, push) or index($what, default)) {
						#{_kgrid_classname($kgrid-push-name-pattern, $stateName, $columnName)} {
							@include _kgrid_push($columnsCount, $extendedState);
						}
					}
					@if $generate-pull-classes == true and ($what == null or index($what, pull) or index($what, default)) {
						#{_kgrid_classname($kgrid-pull-name-pattern, $stateName, $columnName)} {
							@include _kgrid_pull($columnsCount, $extendedState);
						}
					}
					@if $generate-prefix-classes == true and ($what == null or index($what, prefix) or index($what, default)) {
						#{_kgrid_classname($kgrid-prefix-name-pattern, $stateName, $columnName)} {
							@include _kgrid_prefix($columnsCount, $extendedState);
						}
					}
					@if $generate-suffix-classes == true and ($what == null or index($what, suffix) or index($what, default)) {
						#{_kgrid_classname($kgrid-suffix-name-pattern, $stateName, $columnName)} {
							@include _kgrid_suffix($columnsCount, $extendedState);
						}   
					}
				}
 
				// media queries helpers classes :
				@if $generate-helpers-classes == true {
					@include _kgrid_generate_helper_classes($stateName, $what);
				}
			}
		}
	}
}